***** You can find information about the recipes from the templates
***** The only recipes the information are right here is the Auto-register
***** and the De-register scripts


Scripts below are based on Amazon AWS, you can easly change it to othe kinds
of infrastructures, check the "Requirements" for more information

Auto-register:

It's a recipe you attach at your role that try only once to register the node 
into the Zabbix Server

Requirements:

This first version is very simple, using the API and shell script, you may
need shell tools at the bootstrap
   - There are two scripts, one using wget commands and another using curl,
     ubuntu doesn't install curl by default (you still can install it by
     chef or have it at your amazon imagens)
   - An user at Zabbix with API access and RW rights to add machines to your
     group and the Discovered Hosts' group
   - Since it is only one script for all hosts, I didn't make it a chef's
     template and you have to edit it directly to change user and password
   - Include the zabbix-aws::auto-register recipe at the end of your recipe
   - It is based on amazon and it tries to retrieve instance information to
     the variables DNS and ISID, you change it to `hostname` instead
   - Scripts have timeout both for curl and wget, you may want to change it
     depending on your envinronment and how far or how stressed is you Zabbix
     Server
   - In case of error, the script do not block Chef's execution. But you may
     want to change the exit code from 0 to 1 if you want to nest it. If you
     have 24x7 supporte, I recommend you change it to 1

Workflow:
   - search for the node's zabbix tag
   - if registered, do nothing
   - if not registered (tag doesn't contain REGISTERED)
       - Search for a Group with the tag's name
       - Search for a Template with the tag's name
       - Register the machine into Zabbix
       - Tag the host as REGISTERED

It is originally built for AWS, but the only direct relation to it is the
DNS and Instance-id in the begining of the script


De-register:

It is based on 2 scripts, one that get a list of nodes in Amazon, and another
that get list of Zabbix nodes at a given Group and compare both lists to
decide which machines to unregister from Zabbix. If you are not using Amazon
you need to change the way the lists are build and compared. 

Requirements:
   - An IAM account able to list all instances
   - Python-boto in the script server
   - An user with RW rights to the API, to your group, and to the
     Discovered Hosts's group
   - Since it is only two scripts for all hosts, I didn't make it template
     and you have to edit it directly
   - This script is also based in the Instance-Id, storead as the machine
     name on Zabbix, if your machine's name is something else you can will
     remove all of them in the Zabbix server. The machines will not be
     removed from Amazon, but if you have a long time historic, it will be
     removed. You can change both the python and the shell script to retrieve
     the hostname or ip address instead of the Instance-Id

Note: Amazon's API is unpredictable getting terminated instances, so a
      complete list of instances is necessary

Workflow:
   - Each minute get the list of EC2 instances
   - Get the list of instances of a certain configurable given Group
       - recomended only for autoscaling groups, you may want to check if or
         when machines of regular groups dies
   - Compare both lists, if there is an instance present in the Group and not
     present at EC2 anymore, it is removed from the Zabbix server
   - Use aggregated monitoring persists the instances values


TODO:
   - test it again
   - check if we need can configure the groups directly to the templates
   - check if it is easier to get host information from chef/ohai
       - or leave it like that to depend on chef/ohai ?
